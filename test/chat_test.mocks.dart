// Mocks generated by Mockito 5.4.5 from annotations
// in app/test/chat_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:parse_server_sdk/parse_server_sdk.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeParseResponse_0 extends _i1.SmartFake implements _i2.ParseResponse {
  _FakeParseResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeParseRelation_1<T1 extends _i2.ParseObject> extends _i1.SmartFake
    implements _i2.ParseRelation<T1> {
  _FakeParseRelation_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeParseObject_2 extends _i1.SmartFake implements _i2.ParseObject {
  _FakeParseObject_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeParseACL_3 extends _i1.SmartFake implements _i2.ParseACL {
  _FakeParseACL_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ParseObject].
///
/// See the documentation for Mockito's code generation for more information.
class MockParseObject extends _i1.Mock implements _i2.ParseObject {
  MockParseObject() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get parseClassName =>
      (super.noSuchMethod(
            Invocation.getter(#parseClassName),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#parseClassName),
            ),
          )
          as String);

  @override
  set parseClassName(String? _parseClassName) => super.noSuchMethod(
    Invocation.setter(#parseClassName, _parseClassName),
    returnValueForMissingStub: null,
  );

  @override
  set objectId(String? objectId) => super.noSuchMethod(
    Invocation.setter(#objectId, objectId),
    returnValueForMissingStub: null,
  );

  @override
  dynamic clone(Map<String, dynamic>? map) =>
      super.noSuchMethod(Invocation.method(#clone, [map]));

  @override
  _i4.Future<_i2.ParseResponse> getObject(
    String? objectId, {
    List<String>? include,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getObject, [objectId], {#include: include}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#getObject, [objectId], {#include: include}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(this, Invocation.method(#getAll, [])),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> create({
    bool? allowCustomObjectId = false,
    dynamic context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #allowCustomObjectId: allowCustomObjectId,
              #context: context,
            }),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#create, [], {
                  #allowCustomObjectId: allowCustomObjectId,
                  #context: context,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> update({dynamic context}) =>
      (super.noSuchMethod(
            Invocation.method(#update, [], {#context: context}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#update, [], {#context: context}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> saveEventually() =>
      (super.noSuchMethod(
            Invocation.method(#saveEventually, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#saveEventually, []),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> save({dynamic context}) =>
      (super.noSuchMethod(
            Invocation.method(#save, [], {#context: context}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#save, [], {#context: context}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i2.ParseRelation<T> getRelation<T extends _i2.ParseObject>(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getRelation, [key]),
            returnValue: _FakeParseRelation_1<T>(
              this,
              Invocation.method(#getRelation, [key]),
            ),
          )
          as _i2.ParseRelation<T>);

  @override
  void setRemove(String? key, dynamic element) => super.noSuchMethod(
    Invocation.method(#setRemove, [key, element]),
    returnValueForMissingStub: null,
  );

  @override
  void setRemoveAll(String? key, List<dynamic>? elements) => super.noSuchMethod(
    Invocation.method(#setRemoveAll, [key, elements]),
    returnValueForMissingStub: null,
  );

  @override
  void setAddAll(String? key, List<dynamic>? elements) => super.noSuchMethod(
    Invocation.method(#setAddAll, [key, elements]),
    returnValueForMissingStub: null,
  );

  @override
  void setAddUnique(String? key, dynamic element) => super.noSuchMethod(
    Invocation.method(#setAddUnique, [key, element]),
    returnValueForMissingStub: null,
  );

  @override
  void setAddAllUnique(String? key, List<dynamic>? elements) =>
      super.noSuchMethod(
        Invocation.method(#setAddAllUnique, [key, elements]),
        returnValueForMissingStub: null,
      );

  @override
  void setAdd<T>(String? key, T? element) => super.noSuchMethod(
    Invocation.method(#setAdd, [key, element]),
    returnValueForMissingStub: null,
  );

  @override
  void addRelation(String? key, List<_i2.ParseObject>? objets) =>
      super.noSuchMethod(
        Invocation.method(#addRelation, [key, objets]),
        returnValueForMissingStub: null,
      );

  @override
  void removeRelation(String? key, List<_i2.ParseObject>? objets) =>
      super.noSuchMethod(
        Invocation.method(#removeRelation, [key, objets]),
        returnValueForMissingStub: null,
      );

  @override
  void setIncrement(String? key, num? amount) => super.noSuchMethod(
    Invocation.method(#setIncrement, [key, amount]),
    returnValueForMissingStub: null,
  );

  @override
  void setDecrement(String? key, num? amount) => super.noSuchMethod(
    Invocation.method(#setDecrement, [key, amount]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.ParseResponse> unset(
    String? key, {
    bool? offlineOnly = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#unset, [key], {#offlineOnly: offlineOnly}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#unset, [key], {#offlineOnly: offlineOnly}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> query<T extends _i2.ParseObject>(
    String? query, {
    _i2.ProgressCallback? progressCallback,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #query,
              [query],
              {#progressCallback: progressCallback},
            ),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(
                  #query,
                  [query],
                  {#progressCallback: progressCallback},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> distinct<T extends _i2.ParseObject>(
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#distinct, [query]),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(this, Invocation.method(#distinct, [query])),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> deleteEventually() =>
      (super.noSuchMethod(
            Invocation.method(#deleteEventually, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#deleteEventually, []),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> delete<T extends _i2.ParseObject>({
    String? id,
    String? path,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#id: id, #path: path}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#delete, [], {#id: id, #path: path}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseObject> fetch({List<String>? include}) =>
      (super.noSuchMethod(
            Invocation.method(#fetch, [], {#include: include}),
            returnValue: _i4.Future<_i2.ParseObject>.value(
              _FakeParseObject_2(
                this,
                Invocation.method(#fetch, [], {#include: include}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseObject>);

  @override
  bool isDirty({String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#isDirty, [], {#key: key}),
            returnValue: false,
          )
          as bool);

  @override
  Map<String, dynamic> toJson({
    bool? full = false,
    bool? forApiRQ = false,
    bool? allowCustomObjectId = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [], {
              #full: full,
              #forApiRQ: forApiRQ,
              #allowCustomObjectId: allowCustomObjectId,
            }),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  dynamic fromJsonForManualObject(Map<String, dynamic>? objectData) => super
      .noSuchMethod(Invocation.method(#fromJsonForManualObject, [objectData]));

  @override
  dynamic fromJson(Map<String, dynamic>? objectData) =>
      super.noSuchMethod(Invocation.method(#fromJson, [objectData]));

  @override
  bool containsValue(Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#containsValue, [value]),
            returnValue: false,
          )
          as bool);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  dynamic operator [](String? key) =>
      super.noSuchMethod(Invocation.method(#[], [key]));

  @override
  void operator []=(String? key, dynamic value) => super.noSuchMethod(
    Invocation.method(#[]=, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> saveInStorage(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#saveInStorage, [key]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void clearUnsavedChanges() => super.noSuchMethod(
    Invocation.method(#clearUnsavedChanges, []),
    returnValueForMissingStub: null,
  );

  @override
  void set<T>(String? key, T? value, {bool? forceUpdate = true}) =>
      super.noSuchMethod(
        Invocation.method(#set, [key, value], {#forceUpdate: forceUpdate}),
        returnValueForMissingStub: null,
      );

  @override
  T? get<T>(String? key, {T? defaultValue}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key], {#defaultValue: defaultValue}),
          )
          as T?);

  @override
  _i4.Future<bool> pin() =>
      (super.noSuchMethod(
            Invocation.method(#pin, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> unpin({String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#unpin, [], {#key: key}),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<dynamic> fromPin(String? objectId) =>
      (super.noSuchMethod(
            Invocation.method(#fromPin, [objectId]),
            returnValue: _i4.Future<dynamic>.value(),
          )
          as _i4.Future<dynamic>);

  @override
  Map<String, dynamic> toPointer() =>
      (super.noSuchMethod(
            Invocation.method(#toPointer, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void setACL<ParseACL>(ParseACL? acl) => super.noSuchMethod(
    Invocation.method(#setACL, [acl]),
    returnValueForMissingStub: null,
  );

  @override
  _i2.ParseACL getACL() =>
      (super.noSuchMethod(
            Invocation.method(#getACL, []),
            returnValue: _FakeParseACL_3(this, Invocation.method(#getACL, [])),
          )
          as _i2.ParseACL);
}

/// A class which mocks [QueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryBuilder<T extends _i2.ParseObject> extends _i1.Mock
    implements _i2.QueryBuilder<T> {
  MockQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T get object =>
      (super.noSuchMethod(
            Invocation.getter(#object),
            returnValue: _i3.dummyValue<T>(this, Invocation.getter(#object)),
          )
          as T);

  @override
  set object(T? _object) => super.noSuchMethod(
    Invocation.setter(#object, _object),
    returnValueForMissingStub: null,
  );

  @override
  List<MapEntry<String, dynamic>> get queries =>
      (super.noSuchMethod(
            Invocation.getter(#queries),
            returnValue: <MapEntry<String, dynamic>>[],
          )
          as List<MapEntry<String, dynamic>>);

  @override
  set queries(List<MapEntry<String, dynamic>>? _queries) => super.noSuchMethod(
    Invocation.setter(#queries, _queries),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> get limiters =>
      (super.noSuchMethod(
            Invocation.getter(#limiters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  Map<String, dynamic> get extraOptions =>
      (super.noSuchMethod(
            Invocation.getter(#extraOptions),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void setRedirectClassNameForKey(String? key) => super.noSuchMethod(
    Invocation.method(#setRedirectClassNameForKey, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void setLimit(int? limit) => super.noSuchMethod(
    Invocation.method(#setLimit, [limit]),
    returnValueForMissingStub: null,
  );

  @override
  void setAmountToSkip(int? skip) => super.noSuchMethod(
    Invocation.method(#setAmountToSkip, [skip]),
    returnValueForMissingStub: null,
  );

  @override
  void whereEquals(String? where) => super.noSuchMethod(
    Invocation.method(#whereEquals, [where]),
    returnValueForMissingStub: null,
  );

  @override
  void orderByAscending(String? order) => super.noSuchMethod(
    Invocation.method(#orderByAscending, [order]),
    returnValueForMissingStub: null,
  );

  @override
  void orderByDescending(String? order) => super.noSuchMethod(
    Invocation.method(#orderByDescending, [order]),
    returnValueForMissingStub: null,
  );

  @override
  void keysToReturn(List<String>? keys) => super.noSuchMethod(
    Invocation.method(#keysToReturn, [keys]),
    returnValueForMissingStub: null,
  );

  @override
  void excludeKeys(List<String>? keys) => super.noSuchMethod(
    Invocation.method(#excludeKeys, [keys]),
    returnValueForMissingStub: null,
  );

  @override
  void includeObject(List<String>? objectTypes) => super.noSuchMethod(
    Invocation.method(#includeObject, [objectTypes]),
    returnValueForMissingStub: null,
  );

  @override
  void whereStartsWith(
    String? column,
    String? prefix, {
    bool? caseSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereStartsWith,
      [column, prefix],
      {#caseSensitive: caseSensitive},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereEndsWith(
    String? column,
    String? prefix, {
    bool? caseSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereEndsWith,
      [column, prefix],
      {#caseSensitive: caseSensitive},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereEqualTo(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereEqualTo, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereLessThan(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereLessThan, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereLessThanOrEqualTo(String? column, dynamic value) =>
      super.noSuchMethod(
        Invocation.method(#whereLessThanOrEqualTo, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereGreaterThan(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereGreaterThan, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereGreaterThanOrEqualsTo(String? column, dynamic value) =>
      super.noSuchMethod(
        Invocation.method(#whereGreaterThanOrEqualsTo, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereNotEqualTo(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereNotEqualTo, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereContainedIn(String? column, List<dynamic>? value) =>
      super.noSuchMethod(
        Invocation.method(#whereContainedIn, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereNotContainedIn(String? column, List<dynamic>? value) =>
      super.noSuchMethod(
        Invocation.method(#whereNotContainedIn, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereValueExists(String? column, bool? value) => super.noSuchMethod(
    Invocation.method(#whereValueExists, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereRelatedTo(String? column, String? className, String? objectId) =>
      super.noSuchMethod(
        Invocation.method(#whereRelatedTo, [column, className, objectId]),
        returnValueForMissingStub: null,
      );

  @override
  void selectKeys(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#selectKeys, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void dontSelectKeys(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#dontSelectKeys, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereArrayContainsAll(String? column, List<dynamic>? value) =>
      super.noSuchMethod(
        Invocation.method(#whereArrayContainsAll, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void regEx(String? column, String? value) => super.noSuchMethod(
    Invocation.method(#regEx, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereContains(
    String? column,
    String? substring, {
    bool? caseSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereContains,
      [column, substring],
      {#caseSensitive: caseSensitive},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereContainsWholeWord(
    String? column,
    String? searchTerm, {
    bool? caseSensitive = false,
    bool? orderByScore = true,
    bool? diacriticSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereContainsWholeWord,
      [column, searchTerm],
      {
        #caseSensitive: caseSensitive,
        #orderByScore: orderByScore,
        #diacriticSensitive: diacriticSensitive,
      },
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereNear(String? column, _i2.ParseGeoPoint? point) =>
      super.noSuchMethod(
        Invocation.method(#whereNear, [column, point]),
        returnValueForMissingStub: null,
      );

  @override
  void whereWithinMiles(
    String? column,
    _i2.ParseGeoPoint? point,
    double? maxDistance,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinMiles, [column, point, maxDistance]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinKilometers(
    String? column,
    _i2.ParseGeoPoint? point,
    double? maxDistance,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinKilometers, [column, point, maxDistance]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinRadians(
    String? column,
    _i2.ParseGeoPoint? point,
    double? maxDistance,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinRadians, [column, point, maxDistance]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinGeoBox(
    String? column,
    _i2.ParseGeoPoint? southwest,
    _i2.ParseGeoPoint? northeast,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinGeoBox, [column, southwest, northeast]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinPolygon(String? column, List<_i2.ParseGeoPoint>? points) =>
      super.noSuchMethod(
        Invocation.method(#whereWithinPolygon, [column, points]),
        returnValueForMissingStub: null,
      );

  @override
  void wherePolygonContains(String? column, _i2.ParseGeoPoint? point) =>
      super.noSuchMethod(
        Invocation.method(#wherePolygonContains, [column, point]),
        returnValueForMissingStub: null,
      );

  @override
  void whereMatchesQuery<E extends _i2.ParseObject>(
    String? column,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereMatchesQuery, [column, query]),
    returnValueForMissingStub: null,
  );

  @override
  void whereDoesNotMatchQuery<E extends _i2.ParseObject>(
    String? column,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereDoesNotMatchQuery, [column, query]),
    returnValueForMissingStub: null,
  );

  @override
  void whereMatchesKeyInQuery<E extends _i2.ParseObject>(
    String? column,
    String? keyInQuery,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereMatchesKeyInQuery, [column, keyInQuery, query]),
    returnValueForMissingStub: null,
  );

  @override
  void whereDoesNotMatchKeyInQuery<E extends _i2.ParseObject>(
    String? column,
    String? keyInQuery,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereDoesNotMatchKeyInQuery, [
      column,
      keyInQuery,
      query,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.ParseResponse> query<U extends _i2.ParseObject>({
    _i2.ProgressCallback? progressCallback,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#query, [], {
              #progressCallback: progressCallback,
            }),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#query, [], {
                  #progressCallback: progressCallback,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> distinct<U extends _i2.ParseObject>(
    String? className,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#distinct, [className]),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#distinct, [className]),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(this, Invocation.method(#count, [])),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  String buildQuery() =>
      (super.noSuchMethod(
            Invocation.method(#buildQuery, []),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#buildQuery, []),
            ),
          )
          as String);

  @override
  String buildQueries(List<MapEntry<String, dynamic>>? queries) =>
      (super.noSuchMethod(
            Invocation.method(#buildQueries, [queries]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#buildQueries, [queries]),
            ),
          )
          as String);

  @override
  String getLimiters(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#getLimiters, [map]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLimiters, [map]),
            ),
          )
          as String);

  @override
  String getExtraOptions(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#getExtraOptions, [map]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getExtraOptions, [map]),
            ),
          )
          as String);

  @override
  String getLimitersRelational(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#getLimitersRelational, [map]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLimitersRelational, [map]),
            ),
          )
          as String);

  @override
  _i4.Future<T?> first() =>
      (super.noSuchMethod(
            Invocation.method(#first, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<List<T>> find() =>
      (super.noSuchMethod(
            Invocation.method(#find, []),
            returnValue: _i4.Future<List<T>>.value(<T>[]),
          )
          as _i4.Future<List<T>>);
}

/// A class which mocks [ParseResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockParseResponse extends _i1.Mock implements _i2.ParseResponse {
  MockParseResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get success =>
      (super.noSuchMethod(Invocation.getter(#success), returnValue: false)
          as bool);

  @override
  set success(bool? _success) => super.noSuchMethod(
    Invocation.setter(#success, _success),
    returnValueForMissingStub: null,
  );

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);

  @override
  set statusCode(int? _statusCode) => super.noSuchMethod(
    Invocation.setter(#statusCode, _statusCode),
    returnValueForMissingStub: null,
  );

  @override
  set result(dynamic _result) => super.noSuchMethod(
    Invocation.setter(#result, _result),
    returnValueForMissingStub: null,
  );

  @override
  set results(List<dynamic>? _results) => super.noSuchMethod(
    Invocation.setter(#results, _results),
    returnValueForMissingStub: null,
  );

  @override
  int get count =>
      (super.noSuchMethod(Invocation.getter(#count), returnValue: 0) as int);

  @override
  set count(int? _count) => super.noSuchMethod(
    Invocation.setter(#count, _count),
    returnValueForMissingStub: null,
  );

  @override
  set error(_i2.ParseError? _error) => super.noSuchMethod(
    Invocation.setter(#error, _error),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ParseObject].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeneratedParseObject extends _i1.Mock implements _i2.ParseObject {
  MockGeneratedParseObject() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get parseClassName =>
      (super.noSuchMethod(
            Invocation.getter(#parseClassName),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#parseClassName),
            ),
          )
          as String);

  @override
  set parseClassName(String? _parseClassName) => super.noSuchMethod(
    Invocation.setter(#parseClassName, _parseClassName),
    returnValueForMissingStub: null,
  );

  @override
  set objectId(String? objectId) => super.noSuchMethod(
    Invocation.setter(#objectId, objectId),
    returnValueForMissingStub: null,
  );

  @override
  dynamic clone(Map<String, dynamic>? map) =>
      super.noSuchMethod(Invocation.method(#clone, [map]));

  @override
  _i4.Future<_i2.ParseResponse> getObject(
    String? objectId, {
    List<String>? include,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getObject, [objectId], {#include: include}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#getObject, [objectId], {#include: include}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(this, Invocation.method(#getAll, [])),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> create({
    bool? allowCustomObjectId = false,
    dynamic context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #allowCustomObjectId: allowCustomObjectId,
              #context: context,
            }),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#create, [], {
                  #allowCustomObjectId: allowCustomObjectId,
                  #context: context,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> update({dynamic context}) =>
      (super.noSuchMethod(
            Invocation.method(#update, [], {#context: context}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#update, [], {#context: context}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> saveEventually() =>
      (super.noSuchMethod(
            Invocation.method(#saveEventually, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#saveEventually, []),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> save({dynamic context}) =>
      (super.noSuchMethod(
            Invocation.method(#save, [], {#context: context}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#save, [], {#context: context}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i2.ParseRelation<T> getRelation<T extends _i2.ParseObject>(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getRelation, [key]),
            returnValue: _FakeParseRelation_1<T>(
              this,
              Invocation.method(#getRelation, [key]),
            ),
          )
          as _i2.ParseRelation<T>);

  @override
  void setRemove(String? key, dynamic element) => super.noSuchMethod(
    Invocation.method(#setRemove, [key, element]),
    returnValueForMissingStub: null,
  );

  @override
  void setRemoveAll(String? key, List<dynamic>? elements) => super.noSuchMethod(
    Invocation.method(#setRemoveAll, [key, elements]),
    returnValueForMissingStub: null,
  );

  @override
  void setAddAll(String? key, List<dynamic>? elements) => super.noSuchMethod(
    Invocation.method(#setAddAll, [key, elements]),
    returnValueForMissingStub: null,
  );

  @override
  void setAddUnique(String? key, dynamic element) => super.noSuchMethod(
    Invocation.method(#setAddUnique, [key, element]),
    returnValueForMissingStub: null,
  );

  @override
  void setAddAllUnique(String? key, List<dynamic>? elements) =>
      super.noSuchMethod(
        Invocation.method(#setAddAllUnique, [key, elements]),
        returnValueForMissingStub: null,
      );

  @override
  void setAdd<T>(String? key, T? element) => super.noSuchMethod(
    Invocation.method(#setAdd, [key, element]),
    returnValueForMissingStub: null,
  );

  @override
  void addRelation(String? key, List<_i2.ParseObject>? objets) =>
      super.noSuchMethod(
        Invocation.method(#addRelation, [key, objets]),
        returnValueForMissingStub: null,
      );

  @override
  void removeRelation(String? key, List<_i2.ParseObject>? objets) =>
      super.noSuchMethod(
        Invocation.method(#removeRelation, [key, objets]),
        returnValueForMissingStub: null,
      );

  @override
  void setIncrement(String? key, num? amount) => super.noSuchMethod(
    Invocation.method(#setIncrement, [key, amount]),
    returnValueForMissingStub: null,
  );

  @override
  void setDecrement(String? key, num? amount) => super.noSuchMethod(
    Invocation.method(#setDecrement, [key, amount]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.ParseResponse> unset(
    String? key, {
    bool? offlineOnly = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#unset, [key], {#offlineOnly: offlineOnly}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#unset, [key], {#offlineOnly: offlineOnly}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> query<T extends _i2.ParseObject>(
    String? query, {
    _i2.ProgressCallback? progressCallback,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #query,
              [query],
              {#progressCallback: progressCallback},
            ),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(
                  #query,
                  [query],
                  {#progressCallback: progressCallback},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> distinct<T extends _i2.ParseObject>(
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#distinct, [query]),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(this, Invocation.method(#distinct, [query])),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> deleteEventually() =>
      (super.noSuchMethod(
            Invocation.method(#deleteEventually, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#deleteEventually, []),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> delete<T extends _i2.ParseObject>({
    String? id,
    String? path,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#id: id, #path: path}),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#delete, [], {#id: id, #path: path}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseObject> fetch({List<String>? include}) =>
      (super.noSuchMethod(
            Invocation.method(#fetch, [], {#include: include}),
            returnValue: _i4.Future<_i2.ParseObject>.value(
              _FakeParseObject_2(
                this,
                Invocation.method(#fetch, [], {#include: include}),
              ),
            ),
          )
          as _i4.Future<_i2.ParseObject>);

  @override
  bool isDirty({String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#isDirty, [], {#key: key}),
            returnValue: false,
          )
          as bool);

  @override
  Map<String, dynamic> toJson({
    bool? full = false,
    bool? forApiRQ = false,
    bool? allowCustomObjectId = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [], {
              #full: full,
              #forApiRQ: forApiRQ,
              #allowCustomObjectId: allowCustomObjectId,
            }),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  dynamic fromJsonForManualObject(Map<String, dynamic>? objectData) => super
      .noSuchMethod(Invocation.method(#fromJsonForManualObject, [objectData]));

  @override
  dynamic fromJson(Map<String, dynamic>? objectData) =>
      super.noSuchMethod(Invocation.method(#fromJson, [objectData]));

  @override
  bool containsValue(Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#containsValue, [value]),
            returnValue: false,
          )
          as bool);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  dynamic operator [](String? key) =>
      super.noSuchMethod(Invocation.method(#[], [key]));

  @override
  void operator []=(String? key, dynamic value) => super.noSuchMethod(
    Invocation.method(#[]=, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> saveInStorage(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#saveInStorage, [key]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void clearUnsavedChanges() => super.noSuchMethod(
    Invocation.method(#clearUnsavedChanges, []),
    returnValueForMissingStub: null,
  );

  @override
  void set<T>(String? key, T? value, {bool? forceUpdate = true}) =>
      super.noSuchMethod(
        Invocation.method(#set, [key, value], {#forceUpdate: forceUpdate}),
        returnValueForMissingStub: null,
      );

  @override
  T? get<T>(String? key, {T? defaultValue}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key], {#defaultValue: defaultValue}),
          )
          as T?);

  @override
  _i4.Future<bool> pin() =>
      (super.noSuchMethod(
            Invocation.method(#pin, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> unpin({String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#unpin, [], {#key: key}),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<dynamic> fromPin(String? objectId) =>
      (super.noSuchMethod(
            Invocation.method(#fromPin, [objectId]),
            returnValue: _i4.Future<dynamic>.value(),
          )
          as _i4.Future<dynamic>);

  @override
  Map<String, dynamic> toPointer() =>
      (super.noSuchMethod(
            Invocation.method(#toPointer, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void setACL<ParseACL>(ParseACL? acl) => super.noSuchMethod(
    Invocation.method(#setACL, [acl]),
    returnValueForMissingStub: null,
  );

  @override
  _i2.ParseACL getACL() =>
      (super.noSuchMethod(
            Invocation.method(#getACL, []),
            returnValue: _FakeParseACL_3(this, Invocation.method(#getACL, [])),
          )
          as _i2.ParseACL);
}

/// A class which mocks [QueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeneratedQueryBuilder<T extends _i2.ParseObject> extends _i1.Mock
    implements _i2.QueryBuilder<T> {
  MockGeneratedQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T get object =>
      (super.noSuchMethod(
            Invocation.getter(#object),
            returnValue: _i3.dummyValue<T>(this, Invocation.getter(#object)),
          )
          as T);

  @override
  set object(T? _object) => super.noSuchMethod(
    Invocation.setter(#object, _object),
    returnValueForMissingStub: null,
  );

  @override
  List<MapEntry<String, dynamic>> get queries =>
      (super.noSuchMethod(
            Invocation.getter(#queries),
            returnValue: <MapEntry<String, dynamic>>[],
          )
          as List<MapEntry<String, dynamic>>);

  @override
  set queries(List<MapEntry<String, dynamic>>? _queries) => super.noSuchMethod(
    Invocation.setter(#queries, _queries),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> get limiters =>
      (super.noSuchMethod(
            Invocation.getter(#limiters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  Map<String, dynamic> get extraOptions =>
      (super.noSuchMethod(
            Invocation.getter(#extraOptions),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void setRedirectClassNameForKey(String? key) => super.noSuchMethod(
    Invocation.method(#setRedirectClassNameForKey, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void setLimit(int? limit) => super.noSuchMethod(
    Invocation.method(#setLimit, [limit]),
    returnValueForMissingStub: null,
  );

  @override
  void setAmountToSkip(int? skip) => super.noSuchMethod(
    Invocation.method(#setAmountToSkip, [skip]),
    returnValueForMissingStub: null,
  );

  @override
  void whereEquals(String? where) => super.noSuchMethod(
    Invocation.method(#whereEquals, [where]),
    returnValueForMissingStub: null,
  );

  @override
  void orderByAscending(String? order) => super.noSuchMethod(
    Invocation.method(#orderByAscending, [order]),
    returnValueForMissingStub: null,
  );

  @override
  void orderByDescending(String? order) => super.noSuchMethod(
    Invocation.method(#orderByDescending, [order]),
    returnValueForMissingStub: null,
  );

  @override
  void keysToReturn(List<String>? keys) => super.noSuchMethod(
    Invocation.method(#keysToReturn, [keys]),
    returnValueForMissingStub: null,
  );

  @override
  void excludeKeys(List<String>? keys) => super.noSuchMethod(
    Invocation.method(#excludeKeys, [keys]),
    returnValueForMissingStub: null,
  );

  @override
  void includeObject(List<String>? objectTypes) => super.noSuchMethod(
    Invocation.method(#includeObject, [objectTypes]),
    returnValueForMissingStub: null,
  );

  @override
  void whereStartsWith(
    String? column,
    String? prefix, {
    bool? caseSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereStartsWith,
      [column, prefix],
      {#caseSensitive: caseSensitive},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereEndsWith(
    String? column,
    String? prefix, {
    bool? caseSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereEndsWith,
      [column, prefix],
      {#caseSensitive: caseSensitive},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereEqualTo(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereEqualTo, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereLessThan(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereLessThan, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereLessThanOrEqualTo(String? column, dynamic value) =>
      super.noSuchMethod(
        Invocation.method(#whereLessThanOrEqualTo, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereGreaterThan(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereGreaterThan, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereGreaterThanOrEqualsTo(String? column, dynamic value) =>
      super.noSuchMethod(
        Invocation.method(#whereGreaterThanOrEqualsTo, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereNotEqualTo(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#whereNotEqualTo, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereContainedIn(String? column, List<dynamic>? value) =>
      super.noSuchMethod(
        Invocation.method(#whereContainedIn, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereNotContainedIn(String? column, List<dynamic>? value) =>
      super.noSuchMethod(
        Invocation.method(#whereNotContainedIn, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void whereValueExists(String? column, bool? value) => super.noSuchMethod(
    Invocation.method(#whereValueExists, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereRelatedTo(String? column, String? className, String? objectId) =>
      super.noSuchMethod(
        Invocation.method(#whereRelatedTo, [column, className, objectId]),
        returnValueForMissingStub: null,
      );

  @override
  void selectKeys(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#selectKeys, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void dontSelectKeys(String? column, dynamic value) => super.noSuchMethod(
    Invocation.method(#dontSelectKeys, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereArrayContainsAll(String? column, List<dynamic>? value) =>
      super.noSuchMethod(
        Invocation.method(#whereArrayContainsAll, [column, value]),
        returnValueForMissingStub: null,
      );

  @override
  void regEx(String? column, String? value) => super.noSuchMethod(
    Invocation.method(#regEx, [column, value]),
    returnValueForMissingStub: null,
  );

  @override
  void whereContains(
    String? column,
    String? substring, {
    bool? caseSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereContains,
      [column, substring],
      {#caseSensitive: caseSensitive},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereContainsWholeWord(
    String? column,
    String? searchTerm, {
    bool? caseSensitive = false,
    bool? orderByScore = true,
    bool? diacriticSensitive = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #whereContainsWholeWord,
      [column, searchTerm],
      {
        #caseSensitive: caseSensitive,
        #orderByScore: orderByScore,
        #diacriticSensitive: diacriticSensitive,
      },
    ),
    returnValueForMissingStub: null,
  );

  @override
  void whereNear(String? column, _i2.ParseGeoPoint? point) =>
      super.noSuchMethod(
        Invocation.method(#whereNear, [column, point]),
        returnValueForMissingStub: null,
      );

  @override
  void whereWithinMiles(
    String? column,
    _i2.ParseGeoPoint? point,
    double? maxDistance,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinMiles, [column, point, maxDistance]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinKilometers(
    String? column,
    _i2.ParseGeoPoint? point,
    double? maxDistance,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinKilometers, [column, point, maxDistance]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinRadians(
    String? column,
    _i2.ParseGeoPoint? point,
    double? maxDistance,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinRadians, [column, point, maxDistance]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinGeoBox(
    String? column,
    _i2.ParseGeoPoint? southwest,
    _i2.ParseGeoPoint? northeast,
  ) => super.noSuchMethod(
    Invocation.method(#whereWithinGeoBox, [column, southwest, northeast]),
    returnValueForMissingStub: null,
  );

  @override
  void whereWithinPolygon(String? column, List<_i2.ParseGeoPoint>? points) =>
      super.noSuchMethod(
        Invocation.method(#whereWithinPolygon, [column, points]),
        returnValueForMissingStub: null,
      );

  @override
  void wherePolygonContains(String? column, _i2.ParseGeoPoint? point) =>
      super.noSuchMethod(
        Invocation.method(#wherePolygonContains, [column, point]),
        returnValueForMissingStub: null,
      );

  @override
  void whereMatchesQuery<E extends _i2.ParseObject>(
    String? column,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereMatchesQuery, [column, query]),
    returnValueForMissingStub: null,
  );

  @override
  void whereDoesNotMatchQuery<E extends _i2.ParseObject>(
    String? column,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereDoesNotMatchQuery, [column, query]),
    returnValueForMissingStub: null,
  );

  @override
  void whereMatchesKeyInQuery<E extends _i2.ParseObject>(
    String? column,
    String? keyInQuery,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereMatchesKeyInQuery, [column, keyInQuery, query]),
    returnValueForMissingStub: null,
  );

  @override
  void whereDoesNotMatchKeyInQuery<E extends _i2.ParseObject>(
    String? column,
    String? keyInQuery,
    _i2.QueryBuilder<E>? query,
  ) => super.noSuchMethod(
    Invocation.method(#whereDoesNotMatchKeyInQuery, [
      column,
      keyInQuery,
      query,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.ParseResponse> query<U extends _i2.ParseObject>({
    _i2.ProgressCallback? progressCallback,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#query, [], {
              #progressCallback: progressCallback,
            }),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#query, [], {
                  #progressCallback: progressCallback,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> distinct<U extends _i2.ParseObject>(
    String? className,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#distinct, [className]),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(
                this,
                Invocation.method(#distinct, [className]),
              ),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  _i4.Future<_i2.ParseResponse> count() =>
      (super.noSuchMethod(
            Invocation.method(#count, []),
            returnValue: _i4.Future<_i2.ParseResponse>.value(
              _FakeParseResponse_0(this, Invocation.method(#count, [])),
            ),
          )
          as _i4.Future<_i2.ParseResponse>);

  @override
  String buildQuery() =>
      (super.noSuchMethod(
            Invocation.method(#buildQuery, []),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#buildQuery, []),
            ),
          )
          as String);

  @override
  String buildQueries(List<MapEntry<String, dynamic>>? queries) =>
      (super.noSuchMethod(
            Invocation.method(#buildQueries, [queries]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#buildQueries, [queries]),
            ),
          )
          as String);

  @override
  String getLimiters(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#getLimiters, [map]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLimiters, [map]),
            ),
          )
          as String);

  @override
  String getExtraOptions(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#getExtraOptions, [map]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getExtraOptions, [map]),
            ),
          )
          as String);

  @override
  String getLimitersRelational(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#getLimitersRelational, [map]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLimitersRelational, [map]),
            ),
          )
          as String);

  @override
  _i4.Future<T?> first() =>
      (super.noSuchMethod(
            Invocation.method(#first, []),
            returnValue: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);

  @override
  _i4.Future<List<T>> find() =>
      (super.noSuchMethod(
            Invocation.method(#find, []),
            returnValue: _i4.Future<List<T>>.value(<T>[]),
          )
          as _i4.Future<List<T>>);
}

/// A class which mocks [ParseResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeneratedParseResponse extends _i1.Mock implements _i2.ParseResponse {
  MockGeneratedParseResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get success =>
      (super.noSuchMethod(Invocation.getter(#success), returnValue: false)
          as bool);

  @override
  set success(bool? _success) => super.noSuchMethod(
    Invocation.setter(#success, _success),
    returnValueForMissingStub: null,
  );

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);

  @override
  set statusCode(int? _statusCode) => super.noSuchMethod(
    Invocation.setter(#statusCode, _statusCode),
    returnValueForMissingStub: null,
  );

  @override
  set result(dynamic _result) => super.noSuchMethod(
    Invocation.setter(#result, _result),
    returnValueForMissingStub: null,
  );

  @override
  set results(List<dynamic>? _results) => super.noSuchMethod(
    Invocation.setter(#results, _results),
    returnValueForMissingStub: null,
  );

  @override
  int get count =>
      (super.noSuchMethod(Invocation.getter(#count), returnValue: 0) as int);

  @override
  set count(int? _count) => super.noSuchMethod(
    Invocation.setter(#count, _count),
    returnValueForMissingStub: null,
  );

  @override
  set error(_i2.ParseError? _error) => super.noSuchMethod(
    Invocation.setter(#error, _error),
    returnValueForMissingStub: null,
  );
}
